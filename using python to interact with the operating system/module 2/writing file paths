Question 1
There are two types of file paths: relative and absolute. What is an absolute file path?
- [x] A file path that spells out the exact location of the file.
- [ ] A file path that defaults to the specific directory where the Python command was initially run.
- [ ] A file path used only for calling libraries.
- [ ] A file path used only when the files needed are on the local computer.

Question 2
As a Python programmer, you will probably choose to use relative file paths more often than absolute file paths. 
What are the advantages of relative file paths over absolute file paths? Select all that apply. 
- [x] With relative file paths, it doesn’t matter that the drive names change from computer to computer. 
- [x] Relative file paths don’t change by operating system.
- [ ] Absolute file paths are used to read and write files by the file name alone.
- [ ] Python scripts can run only using relative file paths.

Question 3
When writing file paths in Python, it’s a best practice to use only forward slashes (/ )to separate the directories. Why is that? 
- [x] Because back-slashes are a special character in Python. 
- [ ] Because Windows uses back-slashes (\) in file paths.
- [ ] Because back-slashes can be used only in relative file paths.
- [ ] Because back-slashes are used only for the root.

Question 4
You can call a file with a relative file path using the file name, provided you also use the CWD: What does CWD stand for?
- [ ] Content working directory
- [ ] Command working directory 
- [x] Current working directory 
- [ ] Current web directory

Question 5
Many Python programmers use the command os.path to wrap directories. What is that specific command designed to do? 
- [ ] List files and directories to find the file path you need using this code.
- [ ] Use the current directory. 
- [x] Work around platform differences between Windows and Mac/Linux.
- [ ] To spell out the exact location of the file. 
